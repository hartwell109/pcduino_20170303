#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('pcduino-20170404:server');
var http = require('http');
var config = require('../modules/config')

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var async = require('async');
async.series({
    xmpp: function (callback) {
        require('../modules/xmpp/xmpp')(callback);
    },
    mqtt: function (callback) {
        require('../modules/mqtt/mqtt')(callback);
    },
    serialport: function (callback) {
        require('../modules/serialport/serialport')(callback);
    },
    socketio: function (callback) {
        require('../modules/socketio/socketio')(server, callback);
    }
}, function (err, results) {
    if (err) {
        console.log(err);
    } else {
        results.mqtt.subscribe('presence');
        results.mqtt.publish('presence', 'mqtt good!');

        results.socketio.on('connection', function (socket) {
            console.log('socket.io is connected');
            socket.on('toServer', function (data) {
                console.log(data);
                results.socketio.emit('toClient', data + new Date())
                // results.xmpp.send('pcduino@47.93.49.110', 'echo:' + data);
            })
        })

        results.xmpp.on('chat', function (from, message) {
            console.log('from:' + from + ';' + 'message:' + message);
            // results.xmpp.send(from, 'echo:' + message);
            results.socketio.emit('toClient', message);
            results.mqtt.publish('presence', "mqtt:" + message);
        })
    }
});

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
